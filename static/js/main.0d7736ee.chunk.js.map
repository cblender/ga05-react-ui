{"version":3,"sources":["Pokemon.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","Component","props","componentDidMount","url","state","fetch","then","response","json","pokeData","pokeInfo","setState","imgsrc","sprites","other","dream_world","front_default","img","handlePokedex","console","log","name","showPokedex","statXP","base_experience","statHP","stats","base_stat","statATK","statDEF","statSPD","statWeight","weight","XP","HP","ATK","DEF","SPD","WEI","render","pokedex","show","backgroundStyle","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","className","src","types","type","style","display","onClick","bind","App","fetchPokeList","allpokemon","results","forEach","pokemon","pokeList","push","pokeQuantity","pokeGeneration","this","map","i","key","color","background","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d7736ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Pokemon.css';\nimport Pokedex from './Pokedex';\n\nclass Pokemon extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.render = this.render.bind(this);\n        this.state = {\n            name: this.props.name,\n            url: this.props.url,\n            pokeInfo: '',\n            showPokedex: false\n        };\n\n        // console.log(this.state)\n    }\n\n    componentDidMount = () => {\n        // console.log(\"FIRED! componentDidMount for \"+this.state.name)\n\n        let url = this.state.url\n\n        fetch(url)\n        .then(response => response.json())\n        .then((pokeData) => {\n            let pokeInfo = this.state.pokeInfo\n            pokeInfo = pokeData\n            this.setState({pokeInfo})\n\n            let imgsrc = this.state.pokeInfo.sprites.other.dream_world.front_default\n            this.setState({img: imgsrc})\n        })\n\n        \n    }    \n\n    handlePokedex = () => {\n        console.log(\"FIRED! handlePokedex for \"+this.state.pokeInfo.name)\n        console.log(this.state.pokeInfo, this.state.showPokedex)\n        // console.log(this.state.pokeInfo.sprites.other.official-artwork.front_default)\n        if (!this.state.showPokedex) {\n            let bool = true\n            this.setState({showPokedex: bool})\n        }\n        else {\n            let bool = false\n            this.setState({showPokedex: bool})\n        }\n        \n        // THE GREAT POKEMON INFORMATION TRAWLER\n\n\n        let statXP = this.state.pokeInfo.base_experience\n        let statHP = this.state.pokeInfo.stats[0].base_stat\n        let statATK = this.state.pokeInfo.stats[1].base_stat\n        let statDEF = this.state.pokeInfo.stats[2].base_stat\n        let statSPD = this.state.pokeInfo.stats[5].base_stat\n        let statWeight = this.state.pokeInfo.weight\n\n        this.setState({XP: statXP})\n        this.setState({HP: statHP})\n        this.setState({ATK: statATK})\n        this.setState({DEF: statDEF})\n        this.setState({SPD: statSPD})\n        this.setState({WEI: statWeight})\n\n    }\n\n    render = () => {\n        let pokedex\n        let show = this.state.showPokedex\n        let backgroundStyle = {backgroundImage:\"url(\"+this.state.img+\")\", backgroundSize:\"contain\", backgroundPosition:\"center center\", backgroundRepeat:\"no-repeat\"}\n\n        if (show) {\n            pokedex = \n                <div className=\"pokedex\">\n                    <h1>{this.state.pokeInfo.name}</h1>\n                    <img src={this.state.img}></img>\n                    <h3>{this.state.pokeInfo.types[0].type.name}</h3>\n                    <div>\n                        <h4>    \n                            Base XP: {this.state.XP} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                            HP: {this.state.HP} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            Atack: {this.state.ATK} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            Defense: {this.state.DEF} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            Speed: {this.state.SPD} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            Weight: {this.state.WEI}\n                        </h4>\n                    </div>\n                </div>\n                \n        }\n        else {\n            pokedex = <div style={{display:'none'}}></div>\n        }\n\n        return(\n            <div className=\"pokeContainerDoNotTouch\" onClick={this.handlePokedex}>\n \n                <div className=\"container\" style={backgroundStyle}>\n                    <h3 className=\"pokeTitle\">{this.props.name}</h3>\n                </div>\n\n                <div className=\"pokedexContainer\">\n                    {pokedex}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Pokemon;","\nimport React, { Component } from 'react';\nimport './Pokedex.css';\n\nclass Pokedex extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            pokeInfo: this.props.pokeInfo\n        };\n    }\n\n    render() {\n\n        return(\n            <div className=\"dexContainerDoNotTouch\">\n \n                <div className=\"container\">\n                    <h3>POKEDEX CONTAINER</h3>\n                </div>\n                <button>EXIT POKEDEX</button>\n\n            </div>\n        )\n    }\n}\n\nexport default Pokedex;","/*$$$$$$$           /$$                /$$ /$$$$$$$                                  /$$    \n| $$__  $$         | $$               | $/| $$__  $$                                | $$    \n| $$  \\ $$ /$$$$$$ | $$   /$$  /$$$$$$|_/ | $$  \\ $$  /$$$$$$   /$$$$$$   /$$$$$$$ /$$$$$$  \n| $$$$$$$//$$__  $$| $$  /$$/ /$$__  $$   | $$$$$$$/ /$$__  $$ |____  $$ /$$_____/|_  $$_/  \n| $$____/| $$  \\ $$| $$$$$$/ | $$$$$$$$   | $$__  $$| $$$$$$$$  /$$$$$$$| $$        | $$    \n| $$     | $$  | $$| $$_  $$ | $$_____/   | $$  \\ $$| $$_____/ /$$__  $$| $$        | $$ /$$\n| $$     |  $$$$$$/| $$ \\  $$|  $$$$$$$   | $$  | $$|  $$$$$$$|  $$$$$$$|  $$$$$$$  |  $$$$/\n|__/      \\______/ |__/  \\__/ \\_______/   |__/  |__/ \\_______/ \\_______/ \\_______/   \\___*/\n                                                                                            \nimport React, { Component } from 'react';\nimport './App.css';\nimport Pokemon from './Pokemon';\nimport Pokedex from './Pokedex';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      pokeList: []\n    }\n    this.pokeQuantity = 151\n    this.pokeGeneration = 1\n    this.pokeList = []\n  }\n\n  \n\n  fetchPokeList = () => {\n    fetch(\"https://pokeapi.co/api/v2/pokemon?limit=151\")\n    .then(response => response.json())\n    .then((allpokemon) => {\n      \n      console.log(\"========================================\")\n      console.log(allpokemon)\n      console.log(\"========================================\")\n      allpokemon.results.forEach((pokemon) => {\n        let pokeList = this.state.pokeList\n        pokeList.push(pokemon)\n        this.setState({pokeList})\n        // console.log(pokemon)\n      })\n    })\n    // console.log(this.pokeList)\n  }\n\n  componentDidMount () {\n    this.fetchPokeList();\n  }\n\n  render () {\n\n    return (\n      <div className=\"appContainerDoNotTouch\">\n        <div>\n          <h1>PokeReact</h1>\n        </div>\n        <div className=\"spacer\">\n          <p>a React UI by Chris Blendermann</p>\n        </div>\n        <div className=\"container\">\n          {this.state.pokeList.map(\n            (pokemon, i) => {\n              return (<Pokemon key={i} name={pokemon.name} url={pokemon.url} />)\n            }\n          )}  \n        </div>\n\n        <div className=\"pokedex\" style={{display:'none', color:'white', background:'black'}} >\n                    <p>Pokedex Placeholder Text</p>\n                    \n                </div>\n      </div> // END DIV CLASS \"appContainerDoNotTouch\".\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}